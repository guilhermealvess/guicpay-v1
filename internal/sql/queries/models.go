// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0

package queries

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type TransactionEntryType string

const (
	TransactionEntryTypeInbound  TransactionEntryType = "inbound"
	TransactionEntryTypeOutbound TransactionEntryType = "outbound"
)

func (e *TransactionEntryType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionEntryType(s)
	case string:
		*e = TransactionEntryType(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionEntryType: %T", src)
	}
	return nil
}

type NullTransactionEntryType struct {
	TransactionEntryType TransactionEntryType `json:"transaction_entry_type"`
	Valid                bool                 `json:"valid"` // Valid is true if TransactionEntryType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionEntryType) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionEntryType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionEntryType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionEntryType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionEntryType), nil
}

type TransactionType string

const (
	TransactionTypeDeposit  TransactionType = "deposit"
	TransactionTypeTransfer TransactionType = "transfer"
)

func (e *TransactionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionType(s)
	case string:
		*e = TransactionType(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionType: %T", src)
	}
	return nil
}

type NullTransactionType struct {
	TransactionType TransactionType `json:"transaction_type"`
	Valid           bool            `json:"valid"` // Valid is true if TransactionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionType) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionType), nil
}

type WalletType string

const (
	WalletTypeSeller WalletType = "seller"
	WalletTypeCommom WalletType = "commom"
)

func (e *WalletType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = WalletType(s)
	case string:
		*e = WalletType(s)
	default:
		return fmt.Errorf("unsupported scan type for WalletType: %T", src)
	}
	return nil
}

type NullWalletType struct {
	WalletType WalletType `json:"wallet_type"`
	Valid      bool       `json:"valid"` // Valid is true if WalletType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullWalletType) Scan(value interface{}) error {
	if value == nil {
		ns.WalletType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.WalletType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullWalletType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.WalletType), nil
}

type Transaction struct {
	ID          uuid.UUID            `db:"id" json:"id"`
	ReferenceID uuid.UUID            `db:"reference_id" json:"reference_id"`
	WalletID    uuid.UUID            `db:"wallet_id" json:"wallet_id"`
	Type        TransactionType      `db:"type" json:"type"`
	EntriesType TransactionEntryType `db:"entries_type" json:"entries_type"`
	Currency    string               `db:"currency" json:"currency"`
	Amount      int32                `db:"amount" json:"amount"`
	Timestamp   time.Time            `db:"timestamp" json:"timestamp"`
	Snapshot    uuid.NullUUID        `db:"snapshot" json:"snapshot"`
}

type Wallet struct {
	ID              uuid.UUID  `db:"id" json:"id"`
	CustomerName    string     `db:"customer_name" json:"customer_name"`
	DocumentNumber  string     `db:"document_number" json:"document_number"`
	WalletType      WalletType `db:"wallet_type" json:"wallet_type"`
	Email           string     `db:"email" json:"email"`
	EncodedPassword string     `db:"encoded_password" json:"encoded_password"`
	PhoneNumber     string     `db:"phone_number" json:"phone_number"`
	CreatedAt       time.Time  `db:"created_at" json:"created_at"`
	UpdatedAt       time.Time  `db:"updated_at" json:"updated_at"`
}
